/* This file was generated by SableCC (http://www.sablecc.org/). */

package tp6.parser;

import tp6.lexer.*;
import tp6.node.*;
import tp6.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AGrammar */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce ABlock */
		    {
			ArrayList list = new1();
			push(goTo(1), list, false);
		    }
		    break;
                    case 2: /* reduce AAssignmentStatement */
		    {
			ArrayList list = new2();
			push(goTo(2), list, false);
		    }
		    break;
                    case 3: /* reduce AConditionalStatement */
		    {
			ArrayList list = new3();
			push(goTo(2), list, false);
		    }
		    break;
                    case 4: /* reduce APrintSStatement */
		    {
			ArrayList list = new4();
			push(goTo(2), list, false);
		    }
		    break;
                    case 5: /* reduce AReadSStatement */
		    {
			ArrayList list = new5();
			push(goTo(2), list, false);
		    }
		    break;
                    case 6: /* reduce AWhileSStatement */
		    {
			ArrayList list = new6();
			push(goTo(2), list, false);
		    }
		    break;
                    case 7: /* reduce ABlockStatement */
		    {
			ArrayList list = new7();
			push(goTo(2), list, false);
		    }
		    break;
                    case 8: /* reduce ABinexpressionExpression */
		    {
			ArrayList list = new8();
			push(goTo(3), list, false);
		    }
		    break;
                    case 9: /* reduce AUniexpressionExpression */
		    {
			ArrayList list = new9();
			push(goTo(3), list, false);
		    }
		    break;
                    case 10: /* reduce AAssignment */
		    {
			ArrayList list = new10();
			push(goTo(4), list, false);
		    }
		    break;
                    case 11: /* reduce AConditional */
		    {
			ArrayList list = new11();
			push(goTo(5), list, false);
		    }
		    break;
                    case 12: /* reduce APrintS */
		    {
			ArrayList list = new12();
			push(goTo(6), list, false);
		    }
		    break;
                    case 13: /* reduce AReadS */
		    {
			ArrayList list = new13();
			push(goTo(7), list, false);
		    }
		    break;
                    case 14: /* reduce AWhileS */
		    {
			ArrayList list = new14();
			push(goTo(8), list, false);
		    }
		    break;
                    case 15: /* reduce ABinexpression */
		    {
			ArrayList list = new15();
			push(goTo(9), list, false);
		    }
		    break;
                    case 16: /* reduce AOperatorarithOperator */
		    {
			ArrayList list = new16();
			push(goTo(10), list, false);
		    }
		    break;
                    case 17: /* reduce AOperatorlogiqueOperator */
		    {
			ArrayList list = new17();
			push(goTo(10), list, false);
		    }
		    break;
                    case 18: /* reduce APlusOperatorarith */
		    {
			ArrayList list = new18();
			push(goTo(11), list, false);
		    }
		    break;
                    case 19: /* reduce AMinusOperatorarith */
		    {
			ArrayList list = new19();
			push(goTo(11), list, false);
		    }
		    break;
                    case 20: /* reduce AMultiplierOperatorarith */
		    {
			ArrayList list = new20();
			push(goTo(11), list, false);
		    }
		    break;
                    case 21: /* reduce AModuloOperatorarith */
		    {
			ArrayList list = new21();
			push(goTo(11), list, false);
		    }
		    break;
                    case 22: /* reduce ADiviserOperatorarith */
		    {
			ArrayList list = new22();
			push(goTo(11), list, false);
		    }
		    break;
                    case 23: /* reduce ASupOperatorlogique */
		    {
			ArrayList list = new23();
			push(goTo(12), list, false);
		    }
		    break;
                    case 24: /* reduce AInfOperatorlogique */
		    {
			ArrayList list = new24();
			push(goTo(12), list, false);
		    }
		    break;
                    case 25: /* reduce AEqualOperatorlogique */
		    {
			ArrayList list = new25();
			push(goTo(12), list, false);
		    }
		    break;
                    case 26: /* reduce AIntegervalueUniexpression */
		    {
			ArrayList list = new26();
			push(goTo(13), list, false);
		    }
		    break;
                    case 27: /* reduce AVariablerefUniexpression */
		    {
			ArrayList list = new27();
			push(goTo(13), list, false);
		    }
		    break;
                    case 28: /* reduce AIntegervalue */
		    {
			ArrayList list = new28();
			push(goTo(14), list, false);
		    }
		    break;
                    case 29: /* reduce AVariableref */
		    {
			ArrayList list = new29();
			push(goTo(15), list, false);
		    }
		    break;
                    case 30: /* reduce ATerminal$Block */
		    {
			ArrayList list = new30();
			push(goTo(16), list, true);
		    }
		    break;
                    case 31: /* reduce ANonTerminal$Block */
		    {
			ArrayList list = new31();
			push(goTo(16), list, true);
		    }
		    break;
                    case 32: /* reduce ATerminal$Statement */
		    {
			ArrayList list = new32();
			push(goTo(17), list, true);
		    }
		    break;
                    case 33: /* reduce ANonTerminal$Statement */
		    {
			ArrayList list = new33();
			push(goTo(17), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PGrammar node1 = (PGrammar) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AGrammar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGrammar pgrammarNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pgrammarNode1 = new AGrammar(listNode3);
        }
	nodeList.add(pgrammarNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce ABlock */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TObrace tobraceNode2;
        LinkedList listNode4 = new LinkedList();
        TCbrace tcbraceNode5;
        tobraceNode2 = (TObrace)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tcbraceNode5 = (TCbrace)nodeArrayList3.get(0);

        pblockNode1 = new ABlock(tobraceNode2, listNode4, tcbraceNode5);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAssignmentStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PAssignment passignmentNode2;
        passignmentNode2 = (PAssignment)nodeArrayList1.get(0);

        pstatementNode1 = new AAssignmentStatement(passignmentNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AConditionalStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PConditional pconditionalNode2;
        pconditionalNode2 = (PConditional)nodeArrayList1.get(0);

        pstatementNode1 = new AConditionalStatement(pconditionalNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce APrintSStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PPrintS pprintsNode2;
        pprintsNode2 = (PPrintS)nodeArrayList1.get(0);

        pstatementNode1 = new APrintSStatement(pprintsNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AReadSStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PReadS preadsNode2;
        preadsNode2 = (PReadS)nodeArrayList1.get(0);

        pstatementNode1 = new AReadSStatement(preadsNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AWhileSStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PWhileS pwhilesNode2;
        pwhilesNode2 = (PWhileS)nodeArrayList1.get(0);

        pstatementNode1 = new AWhileSStatement(pwhilesNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce ABlockStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PBlock pblockNode2;
        pblockNode2 = (PBlock)nodeArrayList1.get(0);

        pstatementNode1 = new ABlockStatement(pblockNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce ABinexpressionExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PBinexpression pbinexpressionNode2;
        pbinexpressionNode2 = (PBinexpression)nodeArrayList1.get(0);

        pexpressionNode1 = new ABinexpressionExpression(pbinexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AUniexpressionExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PUniexpression puniexpressionNode2;
        puniexpressionNode2 = (PUniexpression)nodeArrayList1.get(0);

        pexpressionNode1 = new AUniexpressionExpression(puniexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAssignment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssignment passignmentNode1;
        {
            // Block
        PVariableref pvariablerefNode2;
        TAssign tassignNode3;
        PExpression pexpressionNode4;
        TSemi tsemiNode5;
        pvariablerefNode2 = (PVariableref)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tsemiNode5 = (TSemi)nodeArrayList4.get(0);

        passignmentNode1 = new AAssignment(pvariablerefNode2, tassignNode3, pexpressionNode4, tsemiNode5);
        }
	nodeList.add(passignmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AConditional */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConditional pconditionalNode1;
        {
            // Block
        TIf tifNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        PBlock pblockNode6;
        TElse telseNode7;
        PBlock pblockNode8;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        pblockNode6 = (PBlock)nodeArrayList5.get(0);
        telseNode7 = (TElse)nodeArrayList6.get(0);
        pblockNode8 = (PBlock)nodeArrayList7.get(0);

        pconditionalNode1 = new AConditional(tifNode2, tlparNode3, pexpressionNode4, trparNode5, pblockNode6, telseNode7, pblockNode8);
        }
	nodeList.add(pconditionalNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce APrintS */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPrintS pprintsNode1;
        {
            // Block
        TPrint tprintNode2;
        PExpression pexpressionNode3;
        TSemi tsemiNode4;
        tprintNode2 = (TPrint)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);

        pprintsNode1 = new APrintS(tprintNode2, pexpressionNode3, tsemiNode4);
        }
	nodeList.add(pprintsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AReadS */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PReadS preadsNode1;
        {
            // Block
        TRead treadNode2;
        PVariableref pvariablerefNode3;
        TSemi tsemiNode4;
        treadNode2 = (TRead)nodeArrayList1.get(0);
        pvariablerefNode3 = (PVariableref)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);

        preadsNode1 = new AReadS(treadNode2, pvariablerefNode3, tsemiNode4);
        }
	nodeList.add(preadsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AWhileS */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PWhileS pwhilesNode1;
        {
            // Block
        TWhile twhileNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        PBlock pblockNode6;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        pblockNode6 = (PBlock)nodeArrayList5.get(0);

        pwhilesNode1 = new AWhileS(twhileNode2, tlparNode3, pexpressionNode4, trparNode5, pblockNode6);
        }
	nodeList.add(pwhilesNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce ABinexpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBinexpression pbinexpressionNode1;
        {
            // Block
        PUniexpression puniexpressionNode2;
        POperator poperatorNode3;
        PExpression pexpressionNode4;
        puniexpressionNode2 = (PUniexpression)nodeArrayList1.get(0);
        poperatorNode3 = (POperator)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pbinexpressionNode1 = new ABinexpression(puniexpressionNode2, poperatorNode3, pexpressionNode4);
        }
	nodeList.add(pbinexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AOperatorarithOperator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        POperatorarith poperatorarithNode2;
        poperatorarithNode2 = (POperatorarith)nodeArrayList1.get(0);

        poperatorNode1 = new AOperatorarithOperator(poperatorarithNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AOperatorlogiqueOperator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        POperatorlogique poperatorlogiqueNode2;
        poperatorlogiqueNode2 = (POperatorlogique)nodeArrayList1.get(0);

        poperatorNode1 = new AOperatorlogiqueOperator(poperatorlogiqueNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce APlusOperatorarith */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POperatorarith poperatorarithNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        poperatorarithNode1 = new APlusOperatorarith(tplusNode2);
        }
	nodeList.add(poperatorarithNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AMinusOperatorarith */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POperatorarith poperatorarithNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        poperatorarithNode1 = new AMinusOperatorarith(tminusNode2);
        }
	nodeList.add(poperatorarithNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AMultiplierOperatorarith */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POperatorarith poperatorarithNode1;
        {
            // Block
        TMultiplier tmultiplierNode2;
        tmultiplierNode2 = (TMultiplier)nodeArrayList1.get(0);

        poperatorarithNode1 = new AMultiplierOperatorarith(tmultiplierNode2);
        }
	nodeList.add(poperatorarithNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AModuloOperatorarith */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POperatorarith poperatorarithNode1;
        {
            // Block
        TModulo tmoduloNode2;
        tmoduloNode2 = (TModulo)nodeArrayList1.get(0);

        poperatorarithNode1 = new AModuloOperatorarith(tmoduloNode2);
        }
	nodeList.add(poperatorarithNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce ADiviserOperatorarith */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POperatorarith poperatorarithNode1;
        {
            // Block
        TDiv tdivNode2;
        tdivNode2 = (TDiv)nodeArrayList1.get(0);

        poperatorarithNode1 = new ADiviserOperatorarith(tdivNode2);
        }
	nodeList.add(poperatorarithNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce ASupOperatorlogique */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POperatorlogique poperatorlogiqueNode1;
        {
            // Block
        TSup tsupNode2;
        tsupNode2 = (TSup)nodeArrayList1.get(0);

        poperatorlogiqueNode1 = new ASupOperatorlogique(tsupNode2);
        }
	nodeList.add(poperatorlogiqueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AInfOperatorlogique */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POperatorlogique poperatorlogiqueNode1;
        {
            // Block
        TInf tinfNode2;
        tinfNode2 = (TInf)nodeArrayList1.get(0);

        poperatorlogiqueNode1 = new AInfOperatorlogique(tinfNode2);
        }
	nodeList.add(poperatorlogiqueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AEqualOperatorlogique */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POperatorlogique poperatorlogiqueNode1;
        {
            // Block
        TEqual tequalNode2;
        tequalNode2 = (TEqual)nodeArrayList1.get(0);

        poperatorlogiqueNode1 = new AEqualOperatorlogique(tequalNode2);
        }
	nodeList.add(poperatorlogiqueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AIntegervalueUniexpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PUniexpression puniexpressionNode1;
        {
            // Block
        PIntegervalue pintegervalueNode2;
        pintegervalueNode2 = (PIntegervalue)nodeArrayList1.get(0);

        puniexpressionNode1 = new AIntegervalueUniexpression(pintegervalueNode2);
        }
	nodeList.add(puniexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AVariablerefUniexpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PUniexpression puniexpressionNode1;
        {
            // Block
        PVariableref pvariablerefNode2;
        pvariablerefNode2 = (PVariableref)nodeArrayList1.get(0);

        puniexpressionNode1 = new AVariablerefUniexpression(pvariablerefNode2);
        }
	nodeList.add(puniexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AIntegervalue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIntegervalue pintegervalueNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pintegervalueNode1 = new AIntegervalue(tnumberNode2);
        }
	nodeList.add(pintegervalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AVariableref */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVariableref pvariablerefNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pvariablerefNode1 = new AVariableref(tidentifierNode2);
        }
	nodeList.add(pvariablerefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce ATerminal$Block */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PBlock pblockNode1;
        pblockNode1 = (PBlock)nodeArrayList1.get(0);
	if(pblockNode1 != null)
	{
	  listNode2.add(pblockNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce ANonTerminal$Block */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PBlock pblockNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pblockNode2 = (PBlock)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pblockNode2 != null)
	{
	  listNode3.add(pblockNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce ATerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce ANonTerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {19, SHIFT, 1}, },
			{{-1, ERROR, 1}, {11, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {16, SHIFT, 8}, {19, SHIFT, 1}, {23, SHIFT, 9}, },
			{{-1, ERROR, 2}, {24, ACCEPT, -1}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 0}, {19, SHIFT, 1}, },
			{{-1, ERROR, 5}, {0, SHIFT, 20}, },
			{{-1, ERROR, 6}, {0, SHIFT, 21}, },
			{{-1, ERROR, 7}, {23, SHIFT, 9}, },
			{{-1, ERROR, 8}, {17, SHIFT, 23}, {23, SHIFT, 9}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 17}, {21, SHIFT, 29}, },
			{{-1, ERROR, 18}, {11, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {16, SHIFT, 8}, {19, SHIFT, 1}, {20, SHIFT, 30}, {23, SHIFT, 9}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 20}, {17, SHIFT, 23}, {23, SHIFT, 9}, },
			{{-1, ERROR, 21}, {17, SHIFT, 23}, {23, SHIFT, 9}, },
			{{-1, ERROR, 22}, {10, SHIFT, 34}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 24}, {10, SHIFT, 35}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, {2, SHIFT, 36}, {3, SHIFT, 37}, {4, SHIFT, 38}, {5, SHIFT, 39}, {6, SHIFT, 40}, {7, SHIFT, 41}, {8, SHIFT, 42}, {9, SHIFT, 43}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 29}, {17, SHIFT, 23}, {23, SHIFT, 9}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 32}, {1, SHIFT, 48}, },
			{{-1, ERROR, 33}, {1, SHIFT, 49}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 44}, {17, SHIFT, 23}, {23, SHIFT, 9}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 47}, {10, SHIFT, 51}, },
			{{-1, ERROR, 48}, {19, SHIFT, 1}, },
			{{-1, ERROR, 49}, {19, SHIFT, 1}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 52}, {13, SHIFT, 54}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 54}, {19, SHIFT, 1}, },
			{{-1, REDUCE, 11}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 10}, {0, 3}, {4, 19}, {48, 52}, {49, 53}, {54, 55}, },
			{{-1, 11}, {18, 31}, },
			{{-1, 24}, {20, 32}, {21, 33}, {29, 47}, {44, 50}, },
			{{-1, 12}, },
			{{-1, 13}, },
			{{-1, 14}, },
			{{-1, 15}, },
			{{-1, 16}, },
			{{-1, 25}, },
			{{-1, 44}, },
			{{-1, 45}, },
			{{-1, 46}, },
			{{-1, 26}, },
			{{-1, 27}, },
			{{-1, 28}, {1, 17}, {7, 22}, {18, 17}, },
			{{-1, 4}, },
			{{-1, 18}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '{'",
			"expecting: 'if', 'while', 'read', 'print', '{', identifier",
			"expecting: EOF",
			"expecting: '{', EOF",
			"expecting: '('",
			"expecting: identifier",
			"expecting: number, identifier",
			"expecting: ')', '+', '-', '*', '/', '%', '>', '<', '==', ';', '='",
			"expecting: 'if', 'while', 'read', 'print', '{', '}', identifier",
			"expecting: '='",
			"expecting: ';'",
			"expecting: ')', '+', '-', '*', '/', '%', '>', '<', '==', ';'",
			"expecting: ')', ';'",
			"expecting: 'if', 'else', 'while', 'read', 'print', '{', '}', identifier, EOF",
			"expecting: ')'",
			"expecting: 'else'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 3, 4, 4, 5, 6, 7, 8, 8, 8, 8, 8, 8, 8, 9, 8, 3, 6, 6, 10, 11, 10, 12, 11, 11, 11, 6, 13, 8, 14, 14, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 10, 0, 0, 12, 8, 15, 8, 0, 8, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}

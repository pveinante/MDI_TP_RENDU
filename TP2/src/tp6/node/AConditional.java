/* This file was generated by SableCC (http://www.sablecc.org/). */

package tp6.node;

import tp6.analysis.*;

@SuppressWarnings("nls")
public final class AConditional extends PConditional
{
    private TIf _if_;
    private TLPar _lPar_;
    private PExpression _cond_;
    private TRPar _rPar_;
    private PBlock _thenpart_;
    private TElse _else_;
    private PBlock _elsepart_;

    public AConditional()
    {
        // Constructor
    }

    public AConditional(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PExpression _cond_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") PBlock _thenpart_,
        @SuppressWarnings("hiding") TElse _else_,
        @SuppressWarnings("hiding") PBlock _elsepart_)
    {
        // Constructor
        setIf(_if_);

        setLPar(_lPar_);

        setCond(_cond_);

        setRPar(_rPar_);

        setThenpart(_thenpart_);

        setElse(_else_);

        setElsepart(_elsepart_);

    }

    @Override
    public Object clone()
    {
        return new AConditional(
            cloneNode(this._if_),
            cloneNode(this._lPar_),
            cloneNode(this._cond_),
            cloneNode(this._rPar_),
            cloneNode(this._thenpart_),
            cloneNode(this._else_),
            cloneNode(this._elsepart_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConditional(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PExpression getCond()
    {
        return this._cond_;
    }

    public void setCond(PExpression node)
    {
        if(this._cond_ != null)
        {
            this._cond_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cond_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public PBlock getThenpart()
    {
        return this._thenpart_;
    }

    public void setThenpart(PBlock node)
    {
        if(this._thenpart_ != null)
        {
            this._thenpart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._thenpart_ = node;
    }

    public TElse getElse()
    {
        return this._else_;
    }

    public void setElse(TElse node)
    {
        if(this._else_ != null)
        {
            this._else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._else_ = node;
    }

    public PBlock getElsepart()
    {
        return this._elsepart_;
    }

    public void setElsepart(PBlock node)
    {
        if(this._elsepart_ != null)
        {
            this._elsepart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elsepart_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._lPar_)
            + toString(this._cond_)
            + toString(this._rPar_)
            + toString(this._thenpart_)
            + toString(this._else_)
            + toString(this._elsepart_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._cond_ == child)
        {
            this._cond_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._thenpart_ == child)
        {
            this._thenpart_ = null;
            return;
        }

        if(this._else_ == child)
        {
            this._else_ = null;
            return;
        }

        if(this._elsepart_ == child)
        {
            this._elsepart_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._cond_ == oldChild)
        {
            setCond((PExpression) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._thenpart_ == oldChild)
        {
            setThenpart((PBlock) newChild);
            return;
        }

        if(this._else_ == oldChild)
        {
            setElse((TElse) newChild);
            return;
        }

        if(this._elsepart_ == oldChild)
        {
            setElsepart((PBlock) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

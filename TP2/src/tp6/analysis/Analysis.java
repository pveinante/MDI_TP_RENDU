/* This file was generated by SableCC (http://www.sablecc.org/). */

package tp6.analysis;

import tp6.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAGrammar(AGrammar node);
    void caseABlock(ABlock node);
    void caseAAssignmentStatement(AAssignmentStatement node);
    void caseAConditionalStatement(AConditionalStatement node);
    void caseAPrintSStatement(APrintSStatement node);
    void caseAReadSStatement(AReadSStatement node);
    void caseAWhileSStatement(AWhileSStatement node);
    void caseABlockStatement(ABlockStatement node);
    void caseABinexpressionExpression(ABinexpressionExpression node);
    void caseAUniexpressionExpression(AUniexpressionExpression node);
    void caseAAssignment(AAssignment node);
    void caseAConditional(AConditional node);
    void caseAPrintS(APrintS node);
    void caseAReadS(AReadS node);
    void caseAWhileS(AWhileS node);
    void caseABinexpression(ABinexpression node);
    void caseAOperatorarithOperator(AOperatorarithOperator node);
    void caseAOperatorlogiqueOperator(AOperatorlogiqueOperator node);
    void caseAPlusOperatorarith(APlusOperatorarith node);
    void caseAMinusOperatorarith(AMinusOperatorarith node);
    void caseAMultiplierOperatorarith(AMultiplierOperatorarith node);
    void caseAModuloOperatorarith(AModuloOperatorarith node);
    void caseADiviserOperatorarith(ADiviserOperatorarith node);
    void caseASupOperatorlogique(ASupOperatorlogique node);
    void caseAInfOperatorlogique(AInfOperatorlogique node);
    void caseAEqualOperatorlogique(AEqualOperatorlogique node);
    void caseAIntegervalueUniexpression(AIntegervalueUniexpression node);
    void caseAVariablerefUniexpression(AVariablerefUniexpression node);
    void caseAIntegervalue(AIntegervalue node);
    void caseAVariableref(AVariableref node);

    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMultiplier(TMultiplier node);
    void caseTDiv(TDiv node);
    void caseTModulo(TModulo node);
    void caseTSup(TSup node);
    void caseTInf(TInf node);
    void caseTEqual(TEqual node);
    void caseTSemi(TSemi node);
    void caseTIf(TIf node);
    void caseTThen(TThen node);
    void caseTElse(TElse node);
    void caseTWhile(TWhile node);
    void caseTRead(TRead node);
    void caseTPrint(TPrint node);
    void caseTBlank(TBlank node);
    void caseTNumber(TNumber node);
    void caseTNewLine(TNewLine node);
    void caseTObrace(TObrace node);
    void caseTCbrace(TCbrace node);
    void caseTAssign(TAssign node);
    void caseTComa(TComa node);
    void caseTIdentifier(TIdentifier node);
    void caseEOF(EOF node);
}
